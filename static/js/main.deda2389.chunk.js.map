{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","customStyle","overlay","position","top","bottom","right","left","content","padding","width","marginRight","transform","display","phoneRegex","App","props","handleSubmit","e","preventDefault","formErrors","rest","valid","Object","values","forEach","val","length","formValid","state","console","error","setState","isActive","log","name","phone","email","password","address","handleChange","target","value","test","Modal","setAppElement","this","className","onSubmit","noValidate","htmlFor","placeholder","type","onChange","onRequestClose","isOpen","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.deda2389.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Modal from 'react-modal';\nimport \"./App.css\";\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\nconst customStyle = {\n  overlay : {\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  },\n  content : {\n    position:'relative',\n    top  : '50%',\n    left : '50%',\n    right : 'auto',\n    bottom : 'auto',\n    padding: '5% 5% 2.8% 2.8%',\n    width : '35%',\n    marginRight : '-50%',\n    transform : 'translate(-50%, -50%)',\n    display : 'flex'\n  }\n}\nconst phoneRegex = RegExp(/^(\\+91[\\-\\s]?)?[0]?(91)?[7896]\\d{9}$/);\n\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  // validate form errors being empty\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // validate the form was filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: null,\n      phone: null,\n      email: null,\n      password: null,\n      address: null,\n      isActive:false,\n      formErrors: {\n        name: \"\",\n        phone: \"\",\n        email: \"\",\n        password: \"\",\n        address: \"\"\n      }\n    };\n  }\n\n  componentWillMount(){\n    Modal.setAppElement('body');\n\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n\n\n    if (formValid(this.state)) {\n      this.setState({\n        isActive:!this.state.isActive,\n      })\n\n      // const { name,phone, email,address, } = this.state;\n      // alert(`Your state values: \\n\n      //         Name: ${name} \\n\n      //         Phone:${phone} \\n\n      //         Email: ${email} \\n\n      //         Address: ${address}`\n      //         )\n      console.log(`\n        --SUBMITTING--\n        First Name: ${this.state.name}\n        Phone: ${this.state.phone}\n        Email: ${this.state.email}\n        Password: ${this.state.password}\n        Address: ${this.state.address}\n      `);\n    } else {\n      console.error(\"FORM INVALID - DISPLAY ERROR MESSAGE\");\n    }\n  };\n\n\n\n\n  handleChange = e => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    let formErrors = {...this.state.formErrors };\n\n    switch (name) {\n      case \"name\":\n        formErrors.name =\n          value.length < 3 ? \"minimum 3 characaters required\" : \"\";\n        break;\n      case \"phone\":\n        formErrors.phone =\n          phoneRegex.test(value)? \"\" : \"invalid phone no\";\n        break;\n      case \"email\":\n        formErrors.email = emailRegex.test(value)\n          ? \"\"\n          : \"invalid email address\";\n        break;\n      case \"password\":\n        formErrors.password =\n          value.length < 6 ? \"minimum 6 characaters required\" : \"\";\n        break;\n        case \"address\":\n          formErrors.address =\n            value.length < 3 ? \"address is required\" : \"\";\n          break;\n      default:\n        break;\n    }\n\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\n  };\n\n  render() {\n    const { formErrors } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n          <h1>Contact Us</h1>\n          <form onSubmit={this.handleSubmit} noValidate>\n            <div className=\"name\">\n              <label htmlFor=\"name\">Name</label>\n              <input\n                className={formErrors.name.length > 0 ? \"error\" : null}\n                placeholder=\"Name\"\n                type=\"text\"\n                name=\"name\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.name.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.name}</span>\n              )}\n            </div>\n            <div className=\"phone\">\n              <label htmlFor=\"phone\">Phone</label>\n              <input\n                className={formErrors.phone.length > 0 ? \"error\" : null}\n                placeholder=\"Phone\"\n                type=\"text\"\n                name=\"phone\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.phone.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.phone}</span>\n              )}\n            </div>\n            <div className=\"email\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className={formErrors.email.length > 0 ? \"error\" : null}\n                placeholder=\"Email\"\n                type=\"email\"\n                name=\"email\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.email.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.email}</span>\n              )}\n            </div>\n            <div className=\"password\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className={formErrors.password.length > 0 ? \"error\" : null}\n                placeholder=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.password.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.password}</span>\n              )}\n            </div>\n            <div className=\"address\">\n              <label htmlFor=\"address\">Address</label>\n              <textarea\n                className={formErrors.address.length > 0 ? \"error\" : null}\n                placeholder=\"Address\"\n                type=\"text\"\n                name=\"address\"\n                noValidate\n                onChange={this.handleChange}\n              />\n            {formErrors.address.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.address}</span>\n              )}\n            </div>\n            <div className=\"submit\">\n              <button type=\"submit\">Submit</button>\n              <Modal\n                onRequestClose={this.handleSubmit}\n                isOpen={this.state.isActive}\n                style={customStyle}>\n                <tbody className=\"aftersubmit\">\n                  <tr>\n                    <td>Name:</td>\n                    <td>{this.state.name}</td>\n                  </tr>\n                  <tr>\n                    <td>Phone:</td>\n                    <td>{this.state.phone}</td>\n                  </tr>\n                  <tr>\n                    <td>Email:</td>\n                    <td>{this.state.email}</td>\n                  </tr>\n                  <tr>\n                    <td>Address: </td>\n                    <td>{this.state.address}</td>\n                  </tr>\n                </tbody>\n              </Modal>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}